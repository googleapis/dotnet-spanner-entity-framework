// Copyright 2021 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated />

using Google.Cloud.EntityFrameworkCore.Spanner.Metadata;
using Google.Cloud.Spanner.V1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using System;
using System.Collections.Generic;

namespace Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Migrations
{
    [DbContext(typeof(MockMigrationSampleDbContext))]
    partial class MockMigrationSampleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Albums", b =>
                {
                    b.Property<long>("AlbumId")
                        .HasColumnType("INT64");

                    b.Property<long?>("MarketingBudget")
                        .HasColumnType("INT64");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("DATE");

                    b.Property<long>("SingerId")
                        .HasColumnType("INT64");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("STRING(100)")
                        .HasMaxLength(100);

                    b.HasKey("AlbumId")
                        .HasName("PRIMARY_KEY");

                    b.HasIndex("Title")
                        .HasName("AlbumsByAlbumTitle2")
                        .HasAnnotation("Spanner:Storing", new[] { "MarketingBudget", "ReleaseDate" });

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Concerts", b =>
                {
                    b.Property<string>("VenueCode")
                        .HasColumnType("STRING(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<long>("SingerId")
                        .HasColumnType("INT64");

                    b.Property<string>("Title")
                        .HasColumnType("STRING(200)")
                        .HasMaxLength(200);

                    b.HasKey("VenueCode", "StartTime", "SingerId")
                        .HasName("PRIMARY_KEY");

                    b.ToTable("Concerts");
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Performances", b =>
                {
                    b.Property<string>("VenueCode")
                        .HasColumnType("STRING(10)")
                        .HasMaxLength(10);

                    b.Property<long>("SingerId")
                        .HasColumnType("INT64");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<long>("AlbumId")
                        .HasColumnType("INT64");

                    b.Property<DateTime>("ConcertStartTime")
                        .HasColumnType("TIMESTAMP");

                    b.Property<double?>("Rating")
                        .HasColumnType("FLOAT64");

                    b.Property<long>("TrackId")
                        .HasColumnType("INT64");

                    b.HasKey("VenueCode", "SingerId", "StartTime")
                        .HasName("PRIMARY_KEY");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Singers", b =>
                {
                    b.Property<long>("SingerId")
                        .HasColumnType("INT64");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("FirstName")
                        .HasColumnType("STRING(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("STRING(400)")
                        .HasComputedColumnSql("(COALESCE(FirstName || ' ', '') || LastName) STORED")
                        .HasMaxLength(400);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("STRING(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Picture")
                        .HasColumnType("BYTES");

                    b.HasKey("SingerId")
                        .HasName("PRIMARY_KEY");

                    b.HasIndex("FullName")
                        .HasName("Idx_Singers_FullName");

                    b.ToTable("Singers");
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.TableWithAllColumnTypes", b =>
                {
                    b.Property<long>("ColInt64")
                        .HasColumnType("INT64");

                    b.Property<bool?>("ColBool")
                        .HasColumnType("BOOL");

                    b.Property<List<Nullable<bool>>>("ColBoolArray")
                        .HasColumnType("ARRAY<BOOL>");

                    b.Property<byte[]>("ColBytes")
                        .HasColumnType("BYTES(100)");

                    b.Property<List<byte[]>>("ColBytesArray")
                        .HasColumnType("ARRAY<BYTES(100)>");

                    b.Property<byte[]>("ColBytesMax")
                        .HasColumnType("BYTES");

                    b.Property<List<byte[]>>("ColBytesMaxArray")
                        .HasColumnType("ARRAY<BYTES>");

                    b.Property<char?>("ColChar")
                        .HasColumnType("STRING(1)");

                    b.Property<DateTime?>("ColCommitTs")
                        .HasColumnName("ColCommitTS")
                        .HasColumnType("TIMESTAMP")
                        .HasAnnotation("UpdateCommitTimestamp", SpannerUpdateCommitTimestamp.OnInsertAndUpdate);

                    b.Property<string>("ColComputed")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("STRING")
                        .HasComputedColumnSql("(ARRAY_TO_STRING(ColStringArray, ',')) STORED");

                    b.Property<DateTime?>("ColDate")
                        .HasColumnType("DATE");

                    b.Property<List<Nullable<DateTime>>>("ColDateArray")
                        .HasColumnType("ARRAY<DATE>");

                    b.Property<double?>("ColFloat64")
                        .HasColumnType("FLOAT64");

                    b.Property<List<Nullable<double>>>("ColFloat64Array")
                        .HasColumnType("ARRAY<FLOAT64>");

                    b.Property<Guid?>("ColGuid")
                        .HasColumnType("STRING(36)");

                    b.Property<List<Nullable<long>>>("ColInt64Array")
                        .HasColumnType("ARRAY<INT64>");

                    b.Property<SpannerNumeric?>("ColNumeric")
                        .HasColumnType("NUMERIC");

                    b.Property<List<Nullable<SpannerNumeric>>>("ColNumericArray")
                        .HasColumnType("ARRAY<NUMERIC>");

                    b.Property<string>("ColString")
                        .HasColumnType("STRING(100)")
                        .HasMaxLength(100);

                    b.Property<List<string>>("ColStringArray")
                        .HasColumnType("ARRAY<STRING(100)>");

                    b.Property<string>("ColStringMax")
                        .HasColumnType("STRING");

                    b.Property<List<string>>("ColStringMaxArray")
                        .HasColumnType("ARRAY<STRING>");

                    b.Property<DateTime?>("ColTimestamp")
                        .HasColumnType("TIMESTAMP");

                    b.Property<List<Nullable<DateTime>>>("ColTimestampArray")
                        .HasColumnType("ARRAY<TIMESTAMP>");

                    b.HasKey("ColInt64")
                        .HasName("PRIMARY_KEY");

                    b.HasIndex("ColDate", "ColCommitTs")
                        .HasName("IDX_TableWithAllColumnTypes_ColDate_ColCommitTS")
                        .HasAnnotation("Spanner:IsNullFiltered", true);

                    b.ToTable("TableWithAllColumnTypes");
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Tracks", b =>
                {
                    b.Property<long>("AlbumId")
                        .HasColumnType("INT64");

                    b.Property<long>("TrackId")
                        .HasColumnType("INT64");

                    b.Property<SpannerNumeric?>("Duration")
                        .HasColumnType("NUMERIC");

                    b.Property<List<string>>("Lyrics")
                        .HasColumnType("ARRAY<STRING>");

                    b.Property<List<string>>("LyricsLanguages")
                        .HasColumnType("ARRAY<STRING(2)>");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("STRING(200)")
                        .HasMaxLength(200);

                    b.HasKey("AlbumId", "TrackId")
                        .HasName("PRIMARY_KEY");

                    b.HasIndex("TrackId", "Title")
                        .IsUnique()
                        .HasName("Idx_Tracks_AlbumId_Title");

                    b.ToTable("Tracks");

                    b.HasAnnotation("Spanner:InterleaveInParent", "Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Albums");

                    b.HasAnnotation("Spanner:InterleaveInParentOnDelete", OnDelete.NoAction);

                    b.HasCheckConstraint("Chk_Languages_Lyrics_Length_Equal", "ARRAY_LENGTH(LyricsLanguages) = ARRAY_LENGTH(Lyrics)");
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Venues", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("STRING(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("Active")
                        .HasColumnType("BOOL");

                    b.Property<long?>("Capacity")
                        .HasColumnType("INT64");

                    b.Property<string>("Name")
                        .HasColumnType("STRING(100)")
                        .HasMaxLength(100);

                    b.Property<List<Nullable<double>>>("Ratings")
                        .HasColumnType("ARRAY<FLOAT64>");

                    b.HasKey("Code")
                        .HasName("PRIMARY_KEY");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Albums", b =>
                {
                    b.HasOne("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Singers", "Singer")
                        .WithMany("Albums")
                        .HasForeignKey("SingerId")
                        .HasConstraintName("FK_Albums_Singers")
                        .IsRequired();
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Concerts", b =>
                {
                    b.HasOne("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Singers", "Singer")
                        .WithMany("Concerts")
                        .HasForeignKey("SingerId")
                        .HasConstraintName("FK_Concerts_Singers")
                        .IsRequired();

                    b.HasOne("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Venues", "VenueCodeNavigation")
                        .WithMany("Concerts")
                        .HasForeignKey("VenueCode")
                        .HasConstraintName("FK_Concerts_Venues")
                        .IsRequired();
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Performances", b =>
                {
                    b.HasOne("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Singers", "Singer")
                        .WithMany("Performances")
                        .HasForeignKey("SingerId")
                        .HasConstraintName("FK_Performances_Singers")
                        .IsRequired();

                    b.HasOne("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Tracks", "Tracks")
                        .WithMany("Performances")
                        .HasForeignKey("AlbumId", "TrackId")
                        .HasConstraintName("FK_Performances_Tracks")
                        .IsRequired();

                    b.HasOne("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Concerts", "Concerts")
                        .WithMany("Performances")
                        .HasForeignKey("VenueCode", "ConcertStartTime", "SingerId")
                        .HasConstraintName("FK_Performances_Concerts")
                        .IsRequired();
                });

            modelBuilder.Entity("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Tracks", b =>
                {
                    b.HasOne("Google.Cloud.EntityFrameworkCore.Spanner.Tests.MigrationTests.Models.Albums", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("PK_Albums")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
