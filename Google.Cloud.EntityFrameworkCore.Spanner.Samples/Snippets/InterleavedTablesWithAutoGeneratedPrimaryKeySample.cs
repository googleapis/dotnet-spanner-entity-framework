// Copyright 2025 Google Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Google.Cloud.EntityFrameworkCore.Spanner.Samples.SampleModel;
using System;
using System.Threading.Tasks;

/// <summary>
/// Interleaved tables in Spanner require that the primary key of the child table
/// contains all the columns of the primary key of the parent table plus all the
/// key columns of the child table.
///
/// When using auto-generated primary keys, we need to explicitly tell Entity
/// Framework that the child-part of the primary key is auto-generated.
/// 
/// Run from the command line with `dotnet run InterleavedTableSample`
/// </summary>
public static class InterleavedTablesWithAutoGeneratedPrimaryKeySample
{
    public static async Task Run(string connectionString)
    {
        await using var context = new SpannerSampleDbContext(connectionString);
        // Invoice has an auto-generated primary key, so we don't have to specify it here.
        var invoice = new Invoice
        {
            Description = "Sample Invoice",
        };
        // The primary key of InvoiceLine is the combination of:
        // 1. InvoiceId: This will be filled in by Entity Framework when the Invoice has been saved.
        // 2. InvoiceLineId: This is auto-generated by Spanner. Note that in the DbContext, the
        //    InvoiceLineId has been annotated with ValueGeneratedOnAdd.
        var invoiceLine = new InvoiceLine
        {
            Invoice = invoice,
            Product = "Sample Product",
            Quantity = 100,
        };
        await context.Invoices.AddAsync(invoice);
        await context.InvoiceLines.AddAsync(invoiceLine);

        // This will save 1 invoice and one invoice line.
        var updateCount = await context.SaveChangesAsync();
        Console.WriteLine($"Saved {updateCount} rows");
        
        Console.WriteLine($"Invoice ID: {invoice.InvoiceId}");
        Console.WriteLine($"InvoiceLine ID: {invoiceLine.InvoiceLineId}");
    }
}
